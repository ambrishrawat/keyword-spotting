#!/usr/bin/env python
import os
import xml.etree.ElementTree as et
import xml.dom.minidom as minidom
import pickle
import operator
from classes.SequenceAlignment import SequenceAlignment
import math
def getQxmlstr(qdict,kwlist_filename="IARPA-babel202b-v1.0d_conv-dev.kwlist.xml", language="swahili", system_id = ""):
	root = et.Element("kwslist",kwlist_filename=kwlist_filename, language=language, system_id=system_id)
	for kwid, kwvalue in qdict.items():
		kwele = et.SubElement(root,"detected_kwlist",kwid=str(kwid),oov_count="0",search_time="0.0")
		for k in kwvalue:
			temp = et.SubElement(kwele,"kw",file=k.get('file_name'),
					channel=k.get('channel'),tbeg=str(k.get('tbeg')),
					dur=str(k.get('dur')),score=str(k.get('score')),decision=k.get('decision'))
		
		
	xmlstr = minidom.parseString(et.tostring(root)).toprettyxml(indent="\t")
	temp_list = xmlstr.split('\n')
	xmlstr = '\n'.join(temp_list[1:])
	return xmlstr
	pass

def getQdict(qfile):
	tree = et.parse(qfile)
	root = tree.getroot()
	qdict = {}
	for r in root.iter('detected_kwlist'):
		kwvalue = []
		for r2 in r.iter('kw'):
			temp_dict = { 'channel' : r2.attrib['channel'],
				'decision' : r2.attrib['decision'],
				'dur' : float(r2.attrib['dur']),
				'file_name' : r2.attrib['file'],
				'score' : float(r2.attrib['score']),
				'tbeg' : float(r2.attrib['tbeg'])}
			kwvalue.append(temp_dict)
		qdict[r.attrib['kwid']] = kwvalue
	return qdict

def aligndicts(dict1,dict2,w1,w2):
	#Align dicts, first slip the dicts as per filenames and then do an allignment wrt to map
	#use the list of keywords
	dict3 = {}
	kwids = list(set(dict1.keys())|set(dict2.keys()))
	for kwid in kwids:
		if kwid not in dict1.keys():
			dict3[kwid] = dict2[kwid]			
			pass
		elif kwid not in dict2.keys():
			dict3[kwid] = dict1[kwid]
			pass			
		else:
			kval1 = dict1[kwid]
			kval2 = dict2[kwid]
			kval3 = [] 
			flist = []
			for k in kval1:
				if k['file_name'] not in flist:
					flist.append(k['file_name'])
			for k in kval2:
				if k['file_name'] not in flist:
					flist.append(k['file_name'])
			for f in flist:
				kpart1 = sorted(filter(lambda x: x['file_name']==f,kval1),key=operator.itemgetter('tbeg'))
				kpart2 = sorted(filter(lambda x: x['file_name']==f,kval2),key=operator.itemgetter('tbeg'))
				'''
				def dist(kele1,kele2):
					if kele1 is None or kele2 is None:
						return 0
					elif abs(kele1['tbeg'] + kele1['dur'] - kele2['tbeg']) < 0.5 and kele1['tbeg'] >= kele2['tbeg']:
						return -1
					elif abs(kele2['tbeg'] + kele2['dur'] - kele1['tbeg']) < 0.5 and kele2['tbeg'] >= kele1['tbeg']:
						return -1
					else:
						return 1
				'''
				def dist(kele1,kele2):
					if kele1 is None or kele2 is None:
						return 0
					else:
						frac = min(kele1['tbeg']+kele1['dur'],kele2['tbeg']+kele2['dur']) - max(kele1['tbeg'],kele2['tbeg'])
						frac = min(frac/kele1['dur'],frac/kele2['dur'])
						return (1.0 - 2.0*frac)+0.5
				alignpair = SequenceAlignment.align(kpart1,kpart2,dist)
				for a in alignpair:
					if a[0] is None and a[1] is not None:
						kval3.append(kpart2[a[1]])
					if a[0] is not None and a[1] is None:
						kval3.append(kpart1[a[0]])
					if a[0] is not None and a[1] is not None:
						ktemp1 = kpart1[a[0]]
						ktemp2 = kpart2[a[1]]
						ktemp = {}
						ktemp['file_name'] = ktemp1['file_name']
						ktemp['decision'] = 'YES'
						ktemp['score'] = w1*(ktemp1['score']) + w2*(ktemp2['score'])
						ktemp['tbeg'] = (ktemp1['tbeg']+ktemp2['tbeg'])*0.5
						ktemp['dur'] = (ktemp1['dur']+ktemp2['dur'])*0.5
						ktemp['channel'] = ktemp1['channel']
						kval3.append(ktemp)						
						#modify scores
			dict3[kwid] = kval3
			
	print len(dict1.keys())
	print len(dict2.keys())
	
	return dict3



if __name__ == "__main__":
	import argparse
	parser = argparse.ArgumentParser(description='CTM file to Indexer.')
	parser.add_argument('--sys1file', type=str, default='./../lib/kws/word.xml', help='Address to KWS output of system 1')
	parser.add_argument('--sys2file', type=str, default='./../lib/kws/word-sys2.xml', help='Address to KWS output of system 1')
	parser.add_argument('--outputfile', type=str, default="./output/word_sys3.xml", help='Address for the combined KWS output of system 1 and system 2')
	parser.add_argument('--w1', type=float, default=0.5, help='Address for the combined KWS output of system 1 and system 2')
	parser.add_argument('--w2', type=float, default=0.5, help='Address for the combined KWS output of system 1 and system 2')
	 


	args = parser.parse_args()
	sys1path = args.sys1file
	sys2path = args.sys2file
	sys3path = args.outputfile
	w1 = args.w1
	w2 = args.w2
	with open(sys1path,'r') as sys1file:
		sys1dict = getQdict(sys1file)
	with open(sys2path,'r') as sys2file:
		sys2dict = getQdict(sys2file)
	with open(sys3path,'w') as sys3file:
		sys3file.write(getQxmlstr(aligndicts(sys1dict,sys2dict,w1,w2)))
	salign = SequenceAlignment()
